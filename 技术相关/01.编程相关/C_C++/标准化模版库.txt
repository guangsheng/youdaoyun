1，模版库是在编译时而不是在运行时进行数据类型检查，保证了类型安全。
2，STL容器采用拷贝方式来接收待插入的元素对象－－在插入的时候容器自动新建等量的元素对象并用待插入对象依次初始化它们（调用拷贝构造函数）；在删除元素时，容器负责释放其内存资源（对采用随机存储策略的容器li?s?t）或者仅仅调用元素的析构函数（对采用连续存储策略的容器vector）
     容器只负责其元素本身一级的存储分配和释放，而不负责元素对象包含的额外内存的管理问题，这需要用户自己负起这个责任，典型的就是用指针作为容器元素。
3，指针代表真正的内存地址，既对象在内存中的存储位置，而迭代器则代表元素在容器中的相对位置。
4，前进迭代器：只能访问下一个元素而不能反向访问前一个元素
      双向迭代器：对前进迭代器的扩充，提供双向访问
      随机访问迭代器：不像前进迭代器或双向迭代器只能访问下一个元素，它能访问前面或后面的第n个元素，也就是随机访问任何一个元素。
5，  vector的迭代器是随机访问迭代器；
        list的迭代器是双向迭代器
        deque的迭代器是随机访问迭代器
        set／map的迭代器是双向迭代器
6，当不会改动容器中的元素值的时候，请使用const迭代器（const_iterator）
7，迭代器失效是指当容器底层存储发生变动的时候，原来指向容器中的某个或某些元素的迭代器由于元素的存储位置发生了改变而不再指向它们，从而成为无效的迭代器。使用无效的迭代器就像使用无效的指针一样危险。