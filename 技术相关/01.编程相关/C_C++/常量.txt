1，在一个编译单元中定义的全局变量的初始值不要依赖定义于另一个编译单元中的全局变量的初始值。
2，void指针可以作为通用指针，因为他可以指向任何类型的对象。
3，所谓自然对齐就是基本数据类型的变量不能简单地存储在内存中的任意地址处，他们的起始地址必须能够被他们的大小整除。
4，隐式转换涉及的安全问题：内存单元访问的安全性和转换结果的安全性。
      对于基本类型的强制转换一定要分清楚值的截断和内存的截断的不同。
5，每一个标识符都具有如下几个属性：值、值的类型、名字、存储类型、作用域范围、连接类型（可见性）、生存期等。
6，每一个默认平台都有自己的精度。
7，对于for循环，有时，决定效率的并不是循环次数本身，而是大型数组导致的内存页面交换次数以及cache的命中率。
8，被const修饰的东西都受到C++语言实现的静态类型安全检查机制的强制保护，可以预防意外修改，提高程序的健壮性。
9，const char* const ERR_DESP_NO_MEMORY = "There is no enough memory!";
      这句话可以在头文件中定义并初始化，也可以在源文件中定义并初始化，但是二者差别较大：
      如果在头文件中定义并初始化，那么包含了该头文件的每一个编译单元不仅会为每一个常量指针常量（const char＊ const）创建一个独立的拷贝项，而且也会为那个长长的字符串字面常量创建一个独立的拷贝项。
       如果在源文件中定义并初始化，头文件中extern，则每一个包含该头文件的编译单元访问的不仅是常量指针常量的唯一实体，而且字符串字面常量也是唯一的实体，这就大大节约了内存，而且不失效率。
